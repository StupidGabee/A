local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local GuiService = game:GetService("GuiService")

local ApplyPlayerTexture = ReplicatedStorage:WaitForChild("NewCustomisationEvents"):WaitForChild("ApplyPlayerTexture")
local ColourEventEyes2 = ReplicatedStorage:WaitForChild("ColourEvents"):WaitForChild("ColourEventEyes2")

local player = Players.LocalPlayer

-- Modern dark theme with better colors
local THEME = {
    Background = Color3.fromRGB(26, 27, 38),
    Surface = Color3.fromRGB(35, 36, 52),
    Primary = Color3.fromRGB(139, 69, 255),
    Secondary = Color3.fromRGB(88, 166, 255),
    Accent = Color3.fromRGB(255, 107, 107),
    Text = Color3.fromRGB(248, 250, 252),
    TextSecondary = Color3.fromRGB(148, 163, 184),
    Border = Color3.fromRGB(51, 65, 85),
    Success = Color3.fromRGB(34, 197, 94),
    Warning = Color3.fromRGB(251, 146, 60),
    Error = Color3.fromRGB(239, 68, 68)
}

local isDragging = false
local dragStart = nil
local startPos = nil
local isMinimized = false

-- Get screen size for responsive design
local viewport = workspace.Camera.ViewportSize
local isMobile = viewport.X < 768 or GuiService:IsTenFootInterface()

-- Calculate responsive sizes (25% smaller than original)
local function getResponsiveSize()
    local baseWidth, baseHeight = 285, 360 -- 25% smaller than 380x480
    
    if isMobile then
        -- Mobile: Use most of screen width but limit height
        local maxWidth = math.min(viewport.X * 0.9, baseWidth)
        local maxHeight = math.min(viewport.Y * 0.8, baseHeight)
        return UDim2.new(0, maxWidth, 0, maxHeight)
    else
        -- Desktop: Use fixed size
        return UDim2.new(0, baseWidth, 0, baseHeight)
    end
end

local function CreateMainUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CustomizationGUI"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.ResetOnSpawn = false
    screenGui.Parent = CoreGui

    -- Main container with better styling
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = getResponsiveSize()
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.BackgroundColor3 = THEME.Background
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    -- Add drop shadow effect
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(1, 30, 1, 30)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.7
    shadow.ZIndex = mainFrame.ZIndex - 1
    shadow.Parent = screenGui
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 16)
    mainCorner.Parent = mainFrame
    
    local shadowCorner = Instance.new("UICorner")
    shadowCorner.CornerRadius = UDim.new(0, 20)
    shadowCorner.Parent = shadow
    
    -- Modern header with gradient
    local header = Instance.new("Frame")
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, 50)
    header.BackgroundColor3 = THEME.Surface
    header.BorderSizePixel = 0
    header.Parent = mainFrame
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 16)
    headerCorner.Parent = header
    
    -- Add subtle gradient to header
    local headerGradient = Instance.new("UIGradient")
    headerGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, THEME.Surface),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(45, 46, 62))
    }
    headerGradient.Rotation = 90
    headerGradient.Parent = header
    
    -- Hide bottom corners of header
    local headerMask = Instance.new("Frame")
    headerMask.Size = UDim2.new(1, 0, 0, 16)
    headerMask.Position = UDim2.new(0, 0, 1, -16)
    headerMask.BackgroundColor3 = THEME.Surface
    headerMask.BorderSizePixel = 0
    headerMask.Parent = header
    
    -- Modern title with icon
    local titleContainer = Instance.new("Frame")
    titleContainer.Size = UDim2.new(1, -120, 1, 0)
    titleContainer.Position = UDim2.new(0, 20, 0, 0)
    titleContainer.BackgroundTransparency = 1
    titleContainer.Parent = header
    
    local icon = Instance.new("TextLabel")
    icon.Size = UDim2.new(0, 24, 0, 24)
    icon.Position = UDim2.new(0, 0, 0.5, 0)
    icon.AnchorPoint = Vector2.new(0, 0.5)
    icon.BackgroundTransparency = 1
    icon.Text = "🎨"
    icon.TextSize = 20
    icon.Parent = titleContainer
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -30, 1, 0)
    title.Position = UDim2.new(0, 30, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Character Studio"
    title.Font = Enum.Font.GothamBold
    title.TextColor3 = THEME.Text
    title.TextSize = isMobile and 16 or 18
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.TextYAlignment = Enum.TextYAlignment.Center
    title.Parent = titleContainer
    
    -- Modern control buttons
    local controlsContainer = Instance.new("Frame")
    controlsContainer.Size = UDim2.new(0, 80, 0, 30)
    controlsContainer.Position = UDim2.new(1, -20, 0.5, 0)
    controlsContainer.AnchorPoint = Vector2.new(1, 0.5)
    controlsContainer.BackgroundTransparency = 1
    controlsContainer.Parent = header
    
    local controlLayout = Instance.new("UIListLayout")
    controlLayout.FillDirection = Enum.FillDirection.Horizontal
    controlLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    controlLayout.Padding = UDim.new(0, 8)
    controlLayout.Parent = controlsContainer
    
    local function createControlButton(text, color, hoverColor)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(0, 30, 0, 30)
        btn.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        btn.BackgroundTransparency = 0.8
        btn.BorderSizePixel = 0
        btn.Text = text
        btn.Font = Enum.Font.GothamBold
        btn.TextColor3 = color
        btn.TextSize = 14
        btn.Parent = controlsContainer
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 8)
        btnCorner.Parent = btn
        
        -- Hover effects
        btn.MouseEnter:Connect(function()
            TweenService:Create(btn, TweenInfo.new(0.2), {
                BackgroundTransparency = 0.6,
                TextColor3 = hoverColor
            }):Play()
        end)
        
        btn.MouseLeave:Connect(function()
            TweenService:Create(btn, TweenInfo.new(0.2), {
                BackgroundTransparency = 0.8,
                TextColor3 = color
            }):Play()
        end)
        
        return btn
    end
    
    local minimizeBtn = createControlButton("−", THEME.Warning, Color3.fromRGB(255, 200, 100))
    local closeBtn = createControlButton("×", THEME.Error, Color3.fromRGB(255, 120, 120))

    -- Modern content area with better scrolling
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.new(1, -20, 1, -70)
    contentFrame.Position = UDim2.new(0, 10, 0, 60)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.ScrollBarThickness = 4
    contentFrame.ScrollBarImageColor3 = THEME.Primary
    contentFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    contentFrame.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    contentFrame.Parent = mainFrame
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 15)
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    listLayout.Parent = contentFrame
    
    -- Auto-resize canvas
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 20)
    end)

    local skinColor = Color3.fromRGB(224, 177, 134)
    local eyeColor = Color3.fromRGB(50, 150, 255)

    local function createModernColorPicker(parent, titleText, iconText, defaultColor, callback)
        local sectionFrame = Instance.new("Frame")
        sectionFrame.Size = UDim2.new(1, 0, 0, 180)
        sectionFrame.BackgroundColor3 = THEME.Surface
        sectionFrame.BorderSizePixel = 0
        sectionFrame.Parent = parent
        
        local sectionCorner = Instance.new("UICorner")
        sectionCorner.CornerRadius = UDim.new(0, 12)
        sectionCorner.Parent = sectionFrame
        
        -- Section header
        local headerSection = Instance.new("Frame")
        headerSection.Size = UDim2.new(1, -20, 0, 40)
        headerSection.Position = UDim2.new(0, 10, 0, 10)
        headerSection.BackgroundTransparency = 1
        headerSection.Parent = sectionFrame
        
        local sectionIcon = Instance.new("TextLabel")
        sectionIcon.Size = UDim2.new(0, 24, 0, 24)
        sectionIcon.Position = UDim2.new(0, 0, 0.5, 0)
        sectionIcon.AnchorPoint = Vector2.new(0, 0.5)
        sectionIcon.BackgroundTransparency = 1
        sectionIcon.Text = iconText
        sectionIcon.TextSize = 18
        sectionIcon.Parent = headerSection

        local sectionTitle = Instance.new("TextLabel")
        sectionTitle.Size = UDim2.new(1, -100, 1, 0)
        sectionTitle.Position = UDim2.new(0, 30, 0, 0)
        sectionTitle.BackgroundTransparency = 1
        sectionTitle.Text = titleText
        sectionTitle.Font = Enum.Font.GothamBold
        sectionTitle.TextColor3 = THEME.Text
        sectionTitle.TextSize = isMobile and 14 or 16
        sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
        sectionTitle.TextYAlignment = Enum.TextYAlignment.Center
        sectionTitle.Parent = headerSection
        
        -- Color preview with better styling
        local previewContainer = Instance.new("Frame")
        previewContainer.Size = UDim2.new(0, 60, 0, 30)
        previewContainer.Position = UDim2.new(1, 0, 0.5, 0)
        previewContainer.AnchorPoint = Vector2.new(1, 0.5)
        previewContainer.BackgroundColor3 = THEME.Border
        previewContainer.BorderSizePixel = 0
        previewContainer.Parent = headerSection
        
        local previewCorner = Instance.new("UICorner")
        previewCorner.CornerRadius = UDim.new(0, 8)
        previewCorner.Parent = previewContainer
        
        local preview = Instance.new("Frame")
        preview.Size = UDim2.new(1, -4, 1, -4)
        preview.Position = UDim2.new(0, 2, 0, 2)
        preview.BackgroundColor3 = defaultColor
        preview.BorderSizePixel = 0
        preview.Parent = previewContainer
        
        local innerPreviewCorner = Instance.new("UICorner")
        innerPreviewCorner.CornerRadius = UDim.new(0, 6)
        innerPreviewCorner.Parent = preview
        
        local currentColor = {defaultColor.R * 255, defaultColor.G * 255, defaultColor.B * 255}
        
        -- RGB sliders container
        local slidersContainer = Instance.new("Frame")
        slidersContainer.Size = UDim2.new(1, -20, 0, 120)
        slidersContainer.Position = UDim2.new(0, 10, 0, 50)
        slidersContainer.BackgroundTransparency = 1
        slidersContainer.Parent = sectionFrame
        
        local slidersLayout = Instance.new("UIListLayout")
        slidersLayout.Padding = UDim.new(0, 12)
        slidersLayout.Parent = slidersContainer
        
        for i, channel in ipairs({"R", "G", "B"}) do
            local sliderContainer = Instance.new("Frame")
            sliderContainer.Size = UDim2.new(1, 0, 0, 30)
            sliderContainer.BackgroundTransparency = 1
            sliderContainer.Parent = slidersContainer
            
            -- Channel label
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0, 20, 1, 0)
            label.BackgroundTransparency = 1
            label.Text = channel
            label.Font = Enum.Font.GothamBold
            label.TextColor3 = THEME.TextSecondary
            label.TextSize = isMobile and 12 or 14
            label.TextXAlignment = Enum.TextXAlignment.Center
            label.Parent = sliderContainer
            
            -- Slider track
            local sliderBg = Instance.new("Frame")
            sliderBg.Size = UDim2.new(1, -80, 0, 18)
            sliderBg.Position = UDim2.new(0, 25, 0.5, 0)
            sliderBg.AnchorPoint = Vector2.new(0, 0.5)
            sliderBg.BackgroundColor3 = Color3.fromRGB(30, 31, 47)
            sliderBg.BorderSizePixel = 0
            sliderBg.Parent = sliderContainer
            
            local sliderCorner = Instance.new("UICorner")
            sliderCorner.CornerRadius = UDim.new(0, 9)
            sliderCorner.Parent = sliderBg
            
            -- Slider fill with channel color
            local channelColors = {
                Color3.fromRGB(239, 68, 68),   -- Red
                Color3.fromRGB(34, 197, 94),   -- Green  
                Color3.fromRGB(59, 130, 246)   -- Blue
            }
            
            local sliderFill = Instance.new("Frame")
            sliderFill.BackgroundColor3 = channelColors[i]
            sliderFill.Size = UDim2.new(currentColor[i] / 255, 0, 1, 0)
            sliderFill.BorderSizePixel = 0
            sliderFill.Parent = sliderBg
            
            local fillCorner = Instance.new("UICorner")
            fillCorner.CornerRadius = UDim.new(0, 9)
            fillCorner.Parent = sliderFill

            -- Modern input box
            local inputBox = Instance.new("TextBox")
            inputBox.Size = UDim2.new(0, 45, 0, 24)
            inputBox.Position = UDim2.new(1, -50, 0.5, 0)
            inputBox.AnchorPoint = Vector2.new(0, 0.5)
            inputBox.BackgroundColor3 = Color3.fromRGB(30, 31, 47)
            inputBox.BorderSizePixel = 0
            inputBox.Font = Enum.Font.Gotham
            inputBox.TextColor3 = THEME.Text
            inputBox.Text = tostring(math.floor(currentColor[i]))
            inputBox.TextSize = isMobile and 11 or 12
            inputBox.TextXAlignment = Enum.TextXAlignment.Center
            inputBox.Parent = sliderContainer
            
            local inputCorner = Instance.new("UICorner")
            inputCorner.CornerRadius = UDim.new(0, 6)
            inputCorner.Parent = inputBox
            
            local isSliding = false
            
            local function updateColor()
                local newColor = Color3.fromRGB(unpack(currentColor))
                preview.BackgroundColor3 = newColor
                callback(newColor)
            end

            -- Input validation with better UX
            inputBox.FocusLost:Connect(function()
                local value = tonumber(inputBox.Text)
                if value then
                    value = math.clamp(value, 0, 255)
                    currentColor[i] = value
                    inputBox.Text = tostring(math.floor(value))
                    
                    TweenService:Create(sliderFill, TweenInfo.new(0.2), {
                        Size = UDim2.new(value / 255, 0, 1, 0)
                    }):Play()
                    updateColor()
                else
                    inputBox.Text = tostring(math.floor(currentColor[i]))
                end
            end)
            
            -- Smooth slider interaction
            local function updateFromSlider(input)
                local relativeX = input.Position.X - sliderBg.AbsolutePosition.X
                local percentage = math.clamp(relativeX / sliderBg.AbsoluteSize.X, 0, 1)
                local value = math.floor(percentage * 255)
                
                currentColor[i] = value
                inputBox.Text = tostring(value)
                sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                updateColor()
            end

            sliderBg.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    isSliding = true
                    updateFromSlider(input)
                    
                    TweenService:Create(sliderBg, TweenInfo.new(0.1), {
                        Size = UDim2.new(1, -80, 0, 20)
                    }):Play()
                end
            end)
            
            local inputChangedConn
            inputChangedConn = UserInputService.InputChanged:Connect(function(input)
                if isSliding and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    updateFromSlider(input)
                end
            end)

            local inputEndedConn
            inputEndedConn = UserInputService.InputEnded:Connect(function(input)
                if isSliding and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                    isSliding = false
                    TweenService:Create(sliderBg, TweenInfo.new(0.1), {
                        Size = UDim2.new(1, -80, 0, 18)
                    }):Play()
                end
            end)

            sectionFrame.Destroying:Connect(function()
                if inputChangedConn then inputChangedConn:Disconnect() end
                if inputEndedConn then inputEndedConn:Disconnect() end
            end)
        end
        
        return sectionFrame
    end
    
    -- Create modern color pickers
    createModernColorPicker(contentFrame, "Skin Tone", "👤", skinColor, function(color)
        skinColor = color
        ApplyPlayerTexture:FireServer("Pattern1", color)
    end)
    
    createModernColorPicker(contentFrame, "Eye Color", "👁️", eyeColor, function(color)
        eyeColor = color
        ColourEventEyes2:FireServer(color)
    end)
    
    -- Enhanced dragging system with mobile support
    local function setupDragging()
        local dragConnections = {}
        
        header.InputBegan:Connect(function(input)
            if isMinimized then return end
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                isDragging = true
                dragStart = input.Position
                startPos = mainFrame.Position
                
                -- Visual feedback
                TweenService:Create(mainFrame, TweenInfo.new(0.1), {
                    Size = mainFrame.Size + UDim2.new(0, 4, 0, 4)
                }):Play()
                TweenService:Create(shadow, TweenInfo.new(0.1), {
                    Size = shadow.Size + UDim2.new(0, 10, 0, 10),
                    ImageTransparency = 0.5
                }):Play()
            end
        end)
        
        dragConnections[#dragConnections + 1] = UserInputService.InputChanged:Connect(function(input)
            if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - dragStart
                local newPos = startPos + UDim2.new(0, delta.X, 0, delta.Y)
                
                -- Keep UI on screen
                local screenSize = viewport
                local frameSize = mainFrame.AbsoluteSize
                
                local minX = frameSize.X * -0.3
                local maxX = screenSize.X - frameSize.X * 0.7
                local minY = 0
                local maxY = screenSize.Y - frameSize.Y
                
                local clampedX = math.clamp(newPos.X.Offset, minX, maxX)
                local clampedY = math.clamp(newPos.Y.Offset, minY, maxY)
                
                mainFrame.Position = UDim2.new(newPos.X.Scale, clampedX, newPos.Y.Scale, clampedY)
                shadow.Position = mainFrame.Position
            end
        end)
        
        dragConnections[#dragConnections + 1] = UserInputService.InputEnded:Connect(function(input)
            if isDragging and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                isDragging = false
                
                -- Reset visual feedback
                TweenService:Create(mainFrame, TweenInfo.new(0.2, Enum.EasingStyle.Back), {
                    Size = mainFrame.Size - UDim2.new(0, 4, 0, 4)
                }):Play()
                TweenService:Create(shadow, TweenInfo.new(0.2), {
                    Size = shadow.Size - UDim2.new(0, 10, 0, 10),
                    ImageTransparency = 0.7
                }):Play()
            end
        end)
        
        -- Cleanup on destroy
        screenGui.Destroying:Connect(function()
            for _, conn in ipairs(dragConnections) do
                conn:Disconnect()
            end
        end)
    end
    
    setupDragging()
    
    -- Modern minimize animation
    minimizeBtn.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        
        local targetSize = isMinimized and UDim2.new(0, mainFrame.Size.X.Offset, 0, 50) or getResponsiveSize()
        local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
        
        TweenService:Create(mainFrame, tweenInfo, {Size = targetSize}):Play()
        TweenService:Create(shadow, tweenInfo, {Size = targetSize + UDim2.new(0, 30, 0, 30)}):Play()
        
        if isMinimized then
            TweenService:Create(contentFrame, TweenInfo.new(0.2), {GroupTransparency = 1}):Play()
            wait(0.2)
            contentFrame.Visible = false
        else
            contentFrame.Visible = true
            TweenService:Create(contentFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back), {GroupTransparency = 0}):Play()
        end
        
        minimizeBtn.Text = isMinimized and "□" or "−"
    end)
    
    -- Smooth close animation
    closeBtn.MouseButton1Click:Connect(function()
        local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        
        TweenService:Create(mainFrame, tweenInfo, {
            Size = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 1
        }):Play()
        
        TweenService:Create(shadow, tweenInfo, {
            Size = UDim2.new(0, 0, 0, 0),
            ImageTransparency = 1
        }):Play()
        
        -- Fade out all content
        for _, child in ipairs(mainFrame:GetDescendants()) do
            if child:IsA("GuiObject") and child ~= mainFrame then
                TweenService:Create(child, tweenInfo, {
                    BackgroundTransparency = 1,
                    TextTransparency = 1,
                    ImageTransparency = 1
                }):Play()
            end
        end
        
        wait(0.4)
        screenGui:Destroy()
    end)
    
    -- Initialize with current colors
    ApplyPlayerTexture:FireServer("Pattern1", skinColor)
    ColourEventEyes2:FireServer(eyeColor)
    
    -- Smooth entrance animation
    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(0, 0, 0, 0)
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    
    TweenService:Create(mainFrame, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = getResponsiveSize()
    }):Play()
    
    TweenService:Create(shadow, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = getResponsiveSize() + UDim2.new(0, 30, 0, 30)
    }):Play()
    
    -- Handle screen rotation/resize on mobile
    workspace.Camera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
        if isMobile then
            local newSize = getResponsiveSize()
            TweenService:Create(mainFrame, TweenInfo.new(0.3), {Size = newSize}):Play()
            TweenService:Create(shadow, TweenInfo.new(0.3), {Size = newSize + UDim2.new(0, 30, 0, 30)}):Play()
        end
    end)
end

CreateMainUI()
